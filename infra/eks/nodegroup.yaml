AWSTemplateFormatVersion: "2010-09-09"

Description: Amazon EKS - Node Group

Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: EKS Cluster
        Parameters:
          - ClusterName
      - Label:
          default: Worker Node Configuration
        Parameters:
          - NodeGroupName
          - NodeAutoScalingGroupMinSize
          - NodeAutoScalingGroupDesiredCapacity
          - NodeAutoScalingGroupMaxSize
          - NodeInstanceType
          - NodeImageIdSSMParam
          - NodeImageId
          - NodeVolumeSize
          - KeyName
          - BootstrapArguments
 
Parameters:

  ID:
    Description: Unique identifier.
    Type: String
    Default: 999hadvhgchjesr

  Environment:
    Description: Environment name, used as a prefix for resources
    Type: String

  BootstrapArguments:
    Type: String
    Default: ""
    Description: "Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami"

  ClusterName:
    Type: String
    Default: minesweeper-dev-cluster
    Description: The cluster name provided when the cluster was created. If it is incorrect, nodes will not be able to join the cluster.

  KeyName:
    Type: "AWS::EC2::KeyPair::KeyName"
    Default: minesweeper-key-pair
    Description: The EC2 Key Pair to allow SSH access to the instances

  NodeAutoScalingGroupDesiredCapacity:
    Type: Number
    Default: 2
    Description: Desired capacity of Node Group ASG.
    MinValue: 2

  NodeAutoScalingGroupMaxSize:
    Type: Number
    Default: 4
    Description: Maximum size of Node Group ASG. Set to at least 1 greater than NodeAutoScalingGroupDesiredCapacity.
    MinValue: 3

  NodeAutoScalingGroupMinSize:
    Type: Number
    Default: 1
    Description: Minimum size of Node Group ASG.

  NodeGroupName:
    Type: String
    Default: minesweeper-node-group
    Description: Unique identifier for the Node Group.

  NodeImageId:
    Type: String
    Default: ""
    Description: > 
      (Optional) Specify your own custom image ID. This value overrides any AWS Systems Manager Parameter Store value specified above.

      EC2 AMI to be used to provision as EKS Worker Node
      Leave it blank to be automatically filed with AWS Optimized AMI on selected Region
      based on (https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html)

  NodeImageIdSSMParam:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: /aws/service/eks/optimized-ami/1.16/amazon-linux-2/recommended/image_id
    Description: AWS Systems Manager Parameter Store parameter of the AMI ID for the worker node instances.

  NodeInstanceType:
    Type: String
    Default: t3.medium
    ConstraintDescription: Must be a valid EC2 instance type
    Description: EC2 instance type for the node instances
    AllowedValues:
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.18xlarge

  NodeVolumeSize:
    Type: Number
    Default: 20
    Description: Node volume size

Conditions:
  HasNodeImageId: !Not
    - "Fn::Equals":
        - Ref: NodeImageId
        - ""

  NodeImageIdOverridden: !Not [ !Equals [!Ref NodeImageId, '']]

Mappings: 
  OptimizedWorkerAmiRegionMap: 
    us-east-2:
      AmiId: ami-027683840ad78d833
    us-east-1:
      AmiId: ami-0d3998d69ebe9b214
    us-west-2:
      AmiId: ami-00b95829322267382
    ap-east-1:
      AmiId: ami-03f8634a8fd592414
    ap-south-1:
      AmiId: ami-0062e5b0411e77c1a
    ap-northeast-1:
      AmiId: ami-0a67c71d2ab43d36f
    ap-northeast-2:
      AmiId: ami-0d66d2fefbc86831a
    ap-southeast-1:
      AmiId: ami-06206d907abb34bbc
    ap-southeast-2:
      AmiId: ami-09f2d86f2d8c4f77d
    eu-central-1:
      AmiId: ami-038bd8d3a2345061f
    eu-west-1:
      AmiId: ami-0061867f123dd2309
    eu-west-2:
      AmiId: ami-0064f24dbfa281088
    eu-west-3:
      AmiId: ami-00b44348ab3eb2c9f
    eu-north-1:
      AmiId: ami-02218be9004537a65
    af-south-1:
      AmiId: ami-02700c093c8ad54b6

Resources:
  NodeSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Security group for all nodes in the cluster
      Tags:
        - Key: !Sub kubernetes.io/cluster/${ClusterName}
          Value: owned
      VpcId:
        Fn::ImportValue: !Sub "${Environment}-vpc-${ID}"

  NodeSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow node to communicate with each other
      FromPort: 0
      GroupId: !Ref NodeSecurityGroup
      GroupName: !Sub ${Environment}-NodeSecurityGroupIngress-${ID}
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      ToPort: 65535

  ClusterControlPlaneSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      FromPort: 443
      GroupId:
        Fn::ImportValue: !Sub "${Environment}-cluster-sec-group-${ID}"
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      GroupdName: !Sub ${Environment}-ClusterControlPlaneSecurityGroupIngress-${ID}
      ToPort: 443

  ControlPlaneEgressToNodeSecurityGroup:
    Type: "AWS::EC2::SecurityGroupEgress"
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with worker Kubelet and pods
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      FromPort: 1025
      GroupName: !Sub ${Environment}-ControlPlanEgressToNodeSecurityGroup-${ID}
      GroupId:
        Fn::ImportValue: !Sub "${Environment}-cluster-sec-group-${ID}"
      IpProtocol: tcp
      ToPort: 65535

  ControlPlaneEgressToNodeSecurityGroupOn443:
    Type: "AWS::EC2::SecurityGroupEgress"
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      FromPort: 443
      GroupName: !Sub "${Environment}-ControlPlaneEgressToNodeSecurityGroupOn443-${ID}"
      GroupId:
        Fn::ImportValue: !Sub "${Environment}-cluster-sec-group-${ID}"
      IpProtocol: tcp
      ToPort: 443

  NodeSecurityGroupFromControlPlaneIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      FromPort: 1025
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      GroupeName: !Sub ${Environment}-NodeSecurityGroupFromControlPlaneIngress-${ID}
      SourceSecurityGroupId:
        Fn::ImportValue: !Sub "${Environment}-cluster-sec-group-${ID}"
      ToPort: 65535

  NodeSecurityGroupFromControlPlaneOn443Ingress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
      FromPort: 443
      GroupName: !Sub $Environment-NodeSecurityGroupFromControlPlanOn443Ingress-${ID}
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId:
        Fn::ImportValue: !Sub "${Environment}-cluster-sec-group"
      ToPort: 443

  NodeLaunchConfig:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      LaunchConfigurationName: !Sub $Environment-NodeLaunchConfig-${ID}
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: true
            VolumeSize: !Ref NodeVolumeSize
            VolumeType: gp2
      IamInstanceProfile: !Sub "${Environment}::EksWorkerInstanceProfileArn"
      ImageId: !If
        - HasNodeImageId
        - Ref: NodeImageId
        - Ref: NodeImageIdSSMParam
      InstanceType: !Ref NodeInstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
        - Ref: NodeSecurityGroup
      UserData: !Base64
        "Fn::Sub": |
          #!/bin/bash
          set -o xtrace
          /etc/eks/bootstrap.sh ${ClusterName} ${BootstrapArguments}
          /opt/aws/bin/cfn-signal --exit-code $? \
                   --stack  ${AWS::StackName} \
                   --resource NodeAutoScalingGroupGroup  \
                   --region ${AWS::Region}

  NodeLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Arn:
            Fn::ImportValue: !Sub "${Environment}::EksWorkerInstanceProfileArn"
        ImageId:
          !If
          - NodeImageIdOverridden
          - !Sub ${NodeImageId}
          - !FindInMap [OptimizedWorkerAmiRegionMap, !Ref "AWS::Region", "AmiId"]
        InstanceType: !Sub ${NodeInstanceType}
        NetworkInterfaces:
        - AssociatePublicIpAddress: false
          DeviceIndex: 0
          Groups:
          - Fn::ImportValue: !Sub "${Environment}-VPC"
        UserData:
          Fn::Base64:
            !Join
              - "\n"
              - - |
                  #!/bin/bash -xe
                  set -o xtrace
                - !Join
                  - " "
                  - - "sudo /etc/eks/bootstrap.sh"
                    - Fn::ImportValue: !Sub "${ClusterName}"
                - !Sub
                  /opt/aws/bin/cfn-signal --exit-code $? --stack  ${AWS::StackName} --region ${AWS::Region} \
                     --resource NodeAutoScalingGroup
      LaunchTemplateName: !Join
                          - '-'
                          - - 'eks'
                            - Fn::ImportValue: !Sub "${ClusterName}"
                            - 'worker'
                            - 'launchtemplate'
                            - !Sub ${ID}

  NodeAutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AutoScalingGroupName: !Sub ${Environment}-NodeAutoScalingGroup-${ID}
      DesiredCapacity: !Ref NodeAutoScalingGroupDesiredCapacity
      LaunchTemplate:
        LaunchTemplateId: !Ref NodeLaunchTemplate
        Version:
          Fn::GetAtt: NodeLaunchTemplate.DefaultVersionNumber        
      # LaunchConfigurationName: !Ref NodeLaunchConfig
      MaxSize: !Ref NodeAutoScalingGroupMaxSize
      MinSize: !Ref NodeAutoScalingGroupMinSize
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: !Sub ${ClusterName}-${NodeGroupName}-Node-${ID}
        - Key: !Sub kubernetes.io/cluster/${ClusterName}-${ID}
          PropagateAtLaunch: true
          Value: owned
      VPCZoneIdentifier:
        Fn::Split:
          - ","
          - Fn::ImportValue:
              Fn::Sub: "${Environment}-Subnets-${ID}"
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: !Ref NodeAutoScalingGroupDesiredCapacity
        PauseTime: PT5M

Outputs:

  NodeSecurityGroup:
    Description: The security group for the node group
    Value: !Ref NodeSecurityGroup

  NodeAutoScalingGroup:
    Description: The autoscaling group
    Value: !Ref NodeAutoScalingGroup
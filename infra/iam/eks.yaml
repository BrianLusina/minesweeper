AWSTemplateFormatVersion: '2010-09-09'
Description: >
  IAM Role, Policy and InstanceProfile creation

Parameters:

  Environment:
    Description: Environment name, used as a prefix for resources
    Type: String

  ID:
    Description: Unique identifier.
    Type: String
    Default: 999hadvhgchjesr

Mappings:
  PartitionMap:
    aws:
      EC2ServicePrincipal: "ec2.amazonaws.com"
    aws-cn:
      EC2ServicePrincipal: "ec2.amazonaws.com.cn"
    aws-iso:
      EC2ServicePrincipal: "ec2.c2s.ic.gov"
    aws-iso-b:
      EC2ServicePrincipal: "ec2.sc2s.sgov.gov"

Resources:
# EKS Service Role
  EksServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Role to be used by EKS Control Plane
      Path: "/"
      RoleName: !Sub "${Environment}-cluster-role-${ID}"
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - eks.amazonaws.com
        Version: '2012-10-17'

      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
      - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
      - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess

  EksServiceRoleCloudWatchMetricPolicy:
    Type: AWS::IAM::Policy
    DependsOn: EksServiceRole
    Properties:
      #Description: Allow EksServiceRole to Put CloudWatch Metric Data
      PolicyDocument:
        Statement:
        - Action:
          - cloudwatch:PutMetricData
          Effect: Allow
          Resource: "*"
        Version: '2012-10-17'
      PolicyName: !Sub ${Environment}-CloudWatchMetricPolicy
      Roles:
      - Ref: EksServiceRole

  #Allow EksServiceRole to Create Security Group, Describe EC2 related information, and any action related to ELB
  EksServiceRoleLoadBalancerPolicy:
    Type: AWS::IAM::Policy
    DependsOn: EksServiceRole
    Properties:
      PolicyName: !Sub ${Environment}-LoadBalancerPolicy"
      PolicyDocument:
        Statement:
        - Action:
          - elasticloadbalancing:*
          - ec2:CreateSecurityGroup
          - ec2:Describe*
          Effect: Allow
          Resource: "*"
        Version: '2012-10-17'

      Roles:
      - Ref: EksServiceRole

# EKS Worker Role
  EksWorkerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Environment}-EksWorkerRole-${ID}
      Description: Role to be used by EKS Worker Node / Instance
      Path: "/"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - !FindInMap [PartitionMap, !Ref "AWS::Partition", EC2ServicePrincipal]
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"

  EksWorkerRoleIngressControllerPolicy:
    Type: AWS::IAM::Policy
    DependsOn: EksWorkerRole
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - acm:DescribeCertificate
          - acm:ListCertificates
          - acm:GetCertificate
          Effect: Allow
          Resource: "*"
        - Action:
          - ec2:AuthorizeSecurityGroupIngress
          - ec2:CreateSecurityGroup
          - ec2:CreateTags
          - ec2:DeleteTags
          - ec2:DeleteSecurityGroup
          - ec2:DescribeAccountAttributes
          - ec2:DescribeAddresses
          - ec2:DescribeInstances
          - ec2:DescribeInstanceStatus
          - ec2:DescribeInternetGateways
          - ec2:DescribeNetworkInterfaces
          - ec2:DescribeSecurityGroups
          - ec2:DescribeSubnets
          - ec2:DescribeTags
          - ec2:DescribeVpcs
          - ec2:ModifyInstanceAttribute
          - ec2:ModifyNetworkInterfaceAttribute
          - ec2:RevokeSecurityGroupIngress
          Effect: Allow
          Resource: "*"
        - Action:
          - elasticloadbalancing:AddListenerCertificates
          - elasticloadbalancing:AddTags
          - elasticloadbalancing:CreateListener
          - elasticloadbalancing:CreateLoadBalancer
          - elasticloadbalancing:CreateRule
          - elasticloadbalancing:CreateTargetGroup
          - elasticloadbalancing:DeleteListener
          - elasticloadbalancing:DeleteLoadBalancer
          - elasticloadbalancing:DeleteRule
          - elasticloadbalancing:DeleteTargetGroup
          - elasticloadbalancing:DeregisterTargets
          - elasticloadbalancing:DescribeListenerCertificates
          - elasticloadbalancing:DescribeListeners
          - elasticloadbalancing:DescribeLoadBalancers
          - elasticloadbalancing:DescribeLoadBalancerAttributes
          - elasticloadbalancing:DescribeRules
          - elasticloadbalancing:DescribeSSLPolicies
          - elasticloadbalancing:DescribeTags
          - elasticloadbalancing:DescribeTargetGroups
          - elasticloadbalancing:DescribeTargetGroupAttributes
          - elasticloadbalancing:DescribeTargetHealth
          - elasticloadbalancing:ModifyListener
          - elasticloadbalancing:ModifyLoadBalancerAttributes
          - elasticloadbalancing:ModifyRule
          - elasticloadbalancing:ModifyTargetGroup
          - elasticloadbalancing:ModifyTargetGroupAttributes
          - elasticloadbalancing:RegisterTargets
          - elasticloadbalancing:RemoveListenerCertificates
          - elasticloadbalancing:RemoveTags
          - elasticloadbalancing:SetIpAddressType
          - elasticloadbalancing:SetSecurityGroups
          - elasticloadbalancing:SetSubnets
          - elasticloadbalancing:SetWebACL
          Effect: Allow
          Resource: "*"
        - Action:
          - iam:CreateServiceLinkedRole
          - iam:GetServerCertificate
          - iam:ListServerCertificates
          Effect: Allow
          Resource: "*"
        - Action:
          - waf-regional:GetWebACLForResource
          - waf-regional:GetWebACL
          - waf-regional:AssociateWebACL
          - waf-regional:DisassociateWebACL
          Effect: Allow
          Resource: "*"
        - Action:
          - tag:GetResources
          - tag:TagResources
          Effect: Allow
          Resource: "*"
        - Action:
          - waf:GetWebACL
          Effect: Allow
          Resource: "*"
        Version: '2012-10-17'
      PolicyName: !Sub ${Environment}-IngressControllerPolicy
      Roles:
      - Ref: EksWorkerRole

# EKS Worker Profile
  EksWorkerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn: EksWorkerRole
    Properties:
      InstanceProfileName: !Sub ${Environment}-EksWorkerInstanceProfile-${ID}
      Path: "/"
      Roles:
      - Ref: EksWorkerRole

# EKS Access Group
  EksAccessGroup:
    Type: AWS::IAM::Group
    Properties: 
      GroupName: !Sub "${Environment}-eks-group-EksAccessGroup-${ID}"

  EksAccessGroupEksClusterPolicy:
    Type: AWS::IAM::Policy
    DependsOn: EksAccessGroup
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - eks:DescribeCluster
          Effect: Allow
          Resource: !Sub "arn:aws:eks:${AWS::Region}:${AWS::AccountId}:cluster/*"
        Version: '2012-10-17'
      PolicyName: !Sub "${Environment}-EksClusterPolicy"
      Groups:
      - !Ref EksAccessGroup
      
# Bastion Host Role
  BastionHostRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub ${Environment}-BastionHostRole-${ID}
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - ec2.amazonaws.com
            Effect: Allow
        Version: 2012-10-17

  BastionHostRoleIamGroupPolicy:
    Type: AWS::IAM::Policy
    DependsOn:
    - BastionHostRole
    - BastionConnectGroup
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - iam:GetGroup
          Effect: Allow
          Resource:
            Fn::GetAtt: BastionConnectGroup.Arn
        Version: '2012-10-17'
      PolicyName: !Sub ${Environment}-BastionConnectGroupPolicy
      Roles:
      - Ref: BastionHostRole
      
  BastionHostProfile:
    DependsOn: BastionHostRole
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: !Sub ${Environment}-BastionHostInstanceProfile-${ID}
      Roles:
      - Ref: BastionHostRole
      Path: /

  BastionConnectGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: !Sub "${Environment}-bastion-group-BastionConnectGroup-${ID}"

  BastionConnectGroupInstanceConnectPolicy:
    Type: AWS::IAM::Policy
    DependsOn: BastionConnectGroup
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - ec2-instance-connect:SendSSHPublicKey
          Effect: Allow
          Resource: !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"
          Condition:
            StringEquals:
              ec2:osuser: "${aws:username}"
        Version: '2012-10-17'
      PolicyName: !Sub "${Environment}-BastionInstanceConnectPolicy"
      Groups:
      - !Ref BastionConnectGroup

Outputs:
# EKS Service Role
  EksServiceRole:
    Description: Ref of Created EKS Service Role
    Export: 
      Name: !Sub ${Environment}::EksServiceRole
    Value:
      Ref: EksServiceRole

  EksServiceRoleArn:
    Description: Ref of Created EKS Service Role Arn
    Export: 
      Name: !Sub ${Environment}::EksServiceRoleArn
    Value:
      Fn::GetAtt: EksServiceRole.Arn

# EKS Access Role
  EksAccessGroupArn:
    Description: Ref of Created EKS Access Role Arn
    Export: 
      Name: !Sub ${Environment}::EksAccessGroupArn
    Value:
      Fn::GetAtt: EksAccessGroup.Arn
      
# EKS Worker Role
  EksWorkerInstanceProfileArn:
    Description: Ref of Created EKS Worker InstanceProfile Arn
    Export:
      Name: !Sub "${Environment}::EksWorkerInstanceProfileArn"
    Value:
      Fn::GetAtt: EksWorkerInstanceProfile.Arn
      
  EksWorkerRoleArn:
    Description: Ref of Created EKS Worker Role Arn
    Export:
      Name: !Sub "${Environment}::EksWorkerRoleArn"
    Value:
      Fn::GetAtt: EksWorkerRole.Arn

# Bastion Host Role
  BastionHostRole:
    Description: Ref of Created Bastion Host Role
    Export: 
      Name: !Sub ${Environment}::BastionHostRole
    Value:
      Ref: BastionHostRole

  BastionHostProfile:
    Description: Ref of Created Bastion Host Profile
    Export:
      Name: !Sub "${Environment}::BastionHostProfile"
    Value:
      Fn::GetAtt: BastionHostProfile.Arn
  
  BastionConnectGroup:
    Description: Ref of Created Bastion Connect IAM Group
    Export: 
      Name: !Sub ${Environment}::BastionConnectGroup
    Value:
      Ref: BastionConnectGroup
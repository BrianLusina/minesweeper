version: 2.1

parameters:
  workingdir:
    type: string
    default: "~/minesweeper"
  node-image-tag:
    type: string
    default: "14"
  docker-version:
    type: string
    default: 19.03.13

executors:
  docker-executor:
    docker:
      - image: docker:17.05.0-ce-git
    working_directory: << pipeline.parameters.workingdir >>

  node-executor:
    docker:
      - image: circleci/node:<< pipeline.parameters.node-image-tag >>
    working_directory: << pipeline.parameters.workingdir >>

  aws-executor:
    docker:
      - image: amazon/aws-cli
    working_directory: << pipeline.parameters.workingdir >>
  
  ansible-executor:
    docker:
      - image: python:3.7-alpine3.11
    working_directory: << pipeline.parameters.workingdir >>
  
  smoke-executor:
    docker:
      - image: python:3.9.0-alpine
    working_directory: << pipeline.parameters.workingdir >>

orbs:
  slack: circleci/slack@4.3.0
  aws-cli: circleci/aws-cli@1.3.0

commands:

  build_docker_image:
    description: Build Docker Image
    parameters:
      image:
        description: Docker Image name
        type: string
      registry:
        description: Docker Registry name
        type: string

    steps:
      - setup_remote_docker:
          version: 19.03.13

      - attach_workspace:
          at: .

      - run:
          name: Install missing dependencies
          command: apk add --update curl jq

      - run:
          name: Build application Docker image
          command: |
            docker build -t << parameters.registry >>/<< parameters.image >>:$(echo $CIRCLE_SHA1 | cut -c1-7) .
      - run:
          name: Save application Docker image
          command: |
            docker save -o << parameters.image >>-image.tar << parameters.registry >>/<< parameters.image >>:$(echo $CIRCLE_SHA1 | cut -c1-7)

      - store_artifacts:
          path: ./<< parameters.image >>-image.tar
          destination: << parameters.image >>-image.tar

      - persist_to_workspace:
          root: .
          paths: 
            - .

  push_docker_image:
    description: Push Docker image to registry
    parameters:
      tag:
        type: string
        description: Docker tag
        default: latest
      image:
        description: Docker image name
        type: string
      registry:
        description: Docker registry name
        type: string

    steps:
      - setup_remote_docker
      - attach_workspace:
          at: .

      - run:
          name: Install missing dependencies
          command: apk add --update curl jq

      - run:
          name: Load application Docker image
          command: docker load --input << parameters.image >>-image.tar

      - run:
          name: Tag docker image
          command: |
            docker tag << parameters.registry >>/<< parameters.image >>:$(echo $CIRCLE_SHA1 | cut -c1-7) << parameters.registry >>/<< parameters.image >>:<< parameters.tag >>
            docker tag << parameters.registry >>/<< parameters.image >>:$(echo $CIRCLE_SHA1 | cut -c1-7) << parameters.registry >>/<< parameters.image >>:<< parameters.tag >>-$(echo $CIRCLE_SHA1 | cut -c1-7)

      - run:
          name: Push application Docker image
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker push << parameters.registry >>/<< parameters.image >>:<< parameters.tag >>-$(echo $CIRCLE_SHA1 | cut -c1-7)
            docker push << parameters.registry >>/<< parameters.image >>:<< parameters.tag >>

  destroy-environment:
    description: Destroy cloudformation stacks given a workflow ID.
    parameters:
      stackId:
        description: Stack ID
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: | 
            aws cloudformation delete-stack --stack-name << parameters.stackId >>

  alert_on_failure:
    description: Notifies channel on failure
    parameters:
      channel:
        description: Slack channel to send slack notification
        type: string
        default: $SLACK_DEFAULT_CHANNEL
    steps:
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1

jobs:
  dependencies:
    executor: node-executor
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "yarn.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: Install Frontend dependencies
          command: make install

      - run:
          name: Install Project tooling
          command: make setup-trivy

      - save_cache:
          key: v1-dependencies-{{ checksum "yarn.lock" }}
          paths:
            - node_modules

      - persist_to_workspace:
          root: .
          paths: 
            - .

      - alert_on_failure

  lint:
    executor: node-executor
    steps:
      - attach_workspace:
          at:
            .

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "yarn.lock" }}
            - v1-dependencies-

      - run:
          name: Install Hadolint
          command: make setup-hadolint

      - run:
          name: Lint Dockerfile
          command: make lint-docker

      - run:
          name: Lint Application
          command: make lint

      - alert_on_failure

  test:
    executor: node-executor
    steps:
      - attach_workspace:
          at:
            .

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "yarn.lock" }}
            - v1-dependencies-

      - run:
          name: Run Unit tests
          command: make test

      - alert_on_failure
  
  security-scan:
    executor: node-executor
    steps:
      - attach_workspace:
          at: .
      
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "yarn.lock" }}
            - v1-dependencies-

      - run:
          name: Scan Frontend
          command: make scan-frontend

      - alert_on_failure
  
  build:
    executor: node-executor
    steps:
      - attach_workspace:
          at: .
      
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "yarn.lock" }}
            - v1-dependencies-

      - run:
          name: Run Build
          command: make build

      - alert_on_failure

  build_docker_image:
    executor: docker-executor
    steps:
      - build_docker_image:
          image: minesweeper
          registry: $DOCKER_REGISTRY
      
      - run:
          name: Scan Docker Image
          command: |
            export TAG=$($CIRCLE_SHA1 | cut -c1-7)
            ./bin/trivy $DOCKER_REGISTRY/minesweeper:${TAG}

      - alert_on_failure

  push_latest:
    executor: docker-executor
    steps:
      - push_docker_image:
          tag: latest
          image: minesweeper
          registry: $DOCKER_REGISTRY

      - alert_on_failure

  setup_iam:
    executor: aws-executor
    steps:
      - checkout

      - run:
          name: Setup EKS IAM
          command: |
            aws cloudformation create-stack \
              --stack-name "minesweeper-eks-iam-${CIRCLE_WORKFLOW_ID:0:7}" \
              --template-body file://<< pipeline.parameters.workingdir >>/infra/iam/eks.yaml \
              --parameters file://<< pipeline.parameters.workingdir >>/infra/params.json \
              --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM"

      - run:
          name: Setup IAM User
          command: |
            aws cloudformation deploy \
              --stack-name "minesweeper-user-iam-${CIRCLE_WORKFLOW_ID:0:7}" \
              --template-file << pipeline.parameters.workingdir >>/infra/iam/user.yaml \
              --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM"

      - alert_on_failure

  setup_networking_infrastructure:
    executor: aws-executor
    steps:
      - checkout

      - run:
          name: Setup Networking Infrastructure
          command: |
            aws cloudformation create-stack \
              --stack-name "minesweeper-dev-networking-${CIRCLE_WORKFLOW_ID:0:7}" \
              --template-body file://<< pipeline.parameters.workingdir >>/infra/networking/networking.yaml \
              --parameters file://<< pipeline.parameters.workingdir >>/infra/networking/networking.params.json \
              --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM"

      - alert_on_failure

  setup_cluster:
    executor: aws-executor
    steps:
      - checkout
      - run:
          name: Setup K8s Cluster
          command: |
            aws cloudformation create-stack \
              --stack-name "minesweeper-dev-cluster-${CIRCLE_WORKFLOW_ID:0:7}" \
              --template-body file://<< pipeline.parameters.workingdir >>/infra/eks/cluster.yaml \
              --parameters file://<< pipeline.parameters.workingdir >>/infra/params.json \
              --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM"

      - alert_on_failure

  setup_node_groups:
    executor: aws-executor
    steps:
      - checkout

      - run:
          name: Setup K8s Node Groups
          command: |
            aws cloudformation create-stack \
              --stack-name "minesweeper-dev-cluster-node-groups-${CIRCLE_WORKFLOW_ID:0:7}" \
              --template-body file://<< pipeline.parameters.workingdir >>/infra/eks/nodegroup.yaml \
              --parameters file://<< pipeline.parameters.workingdir >>/infra/eks/nodegroup.params.json \
              --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM"

      - alert_on_failure

  deploy_application:
    executor: aws-executor
    steps:
      - checkout

      - run:
          name: Install dependencies
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"

      - run:
          name: Deploy Minesweeper Game
          command: |
            aws eks --region $AWS_REGION update-kubeconfig --name minesweeper-dev-cluster
            kubectl config use-context arn:aws:eks:$AWS_REGION:$AWS_ACCOUNT_ID:cluster/minesweeper-dev-cluster
            kubectl apply -f k8s/deplyment.yaml
            kubectl apply -f k8s/service.yaml

      - run:
          name: Wait For Pods
          command: |
            ATTEMPTS=0
            ROLLOUT_STATUS_CMD="kubectl rollout status deployment/minesweeper"
            until $ROLLOUT_STATUS_CMD || [ $ATTEMPTS -eq 60 ]; do
                $ROLLOUT_STATUS_CMD
                ATTEMPTS=$((attempts + 1))
                sleep 10
            done

      - alert_on_failure

  smoke-test:
    executor: smoke-executor
    steps:
      - checkout

      - run:
          name: Install dependencies
          command: |
            apk add --update curl jq
            pip install awscli
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"

      - run:
          name: Smoke test
          command: |
            HOST=$(kubectl get service minesweeper-service | grep 'amazonaws.com' | awk '{print $4}')
            curl $HOST -f
      
      - alert_on_failure      

  publish_release:
    executor: node-executor
    steps:
      - attach_workspace:
          at: .

      - run:
          name: Publish release
          command: npx semantic-release

      - alert_on_failure

workflows:
  version: 2
  test_build_push_tag:
    jobs:
      - dependencies:
          context: thelusina-context

      - lint:
          context: thelusina-context
          requires:
            - dependencies
      
      - test:
          context: thelusina-context
          requires:
            - lint
      
      - security-scan:
          context: thelusina-context
          requires:
            - test

      - build:
          context: thelusina-context
          requires:
            - security-scan

      - build_docker_image:
          context: thelusina-context
          filters:
            branches:
              only:
                - develop
                - main
          requires:
            - build

      - push_latest:
          context: thelusina-context
          filters:
            branches:
              only:
                - develop
                - main
          requires:
            - build_docker_image

      - setup_iam:
          context: thelusina-context
          filters:
            branches:
              only:
                - develop
          requires:
            - push_latest
      
      - setup_networking_infrastructure:
          context: thelusina-context
          filters:
            branches:
              only:
                - develop
          requires:
            - setup_iam

      - setup_cluster:
          context: thelusina-context
          filters:
            branches:
              only:
                - develop
          requires:
            - setup_networking_infrastructure

      - setup_node_groups:
          context: thelusina-context
          filters:
            branches:
              only:
                - develop
          requires:
            - setup_cluster

      - deploy_application:
          context: thelusina-context
          filters:
            branches:
              only:
                - develop
          requires:
            - setup_node_groups

      - smoke-test:
          context: thelusina-context
          filters:
            branches:
              only:
                - develop
          requires:
            - deploy_application

      - publish_release:
          context: thelusina-context
          filters:
            branches:
              only:
                - main
          requires:
            - smoke-test
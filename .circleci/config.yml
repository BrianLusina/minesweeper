version: 2.1

parameters:
  workingdir:
    type: string
    default: "~/minesweeper"
  node-image-tag:
    type: string
    default: "14"
  docker-version:
    type: string
    default: 19.03.13

executors:
  docker-executor:
    docker:
      - image: docker:17.05.0-ce-git
    working_directory: << pipeline.parameters.workingdir >>

  node-executor:
    docker:
      - image: circleci/node:<< pipeline.parameters.node-image-tag >>
    working_directory: << pipeline.parameters.workingdir >>

orbs:
  slack: circleci/slack@4.3.0
  aws-cli: circleci/aws-cli@1.3.0

commands:
  build_docker_image:
    description: Build Docker Image
    parameters:
      image:
        description: Docker Image name
        type: string
      registry:
        description: Docker Registry name
        type: string

    steps:
      - setup_remote_docker:
          version: 19.03.13

      - attach_workspace:
          at: .

      - run:
          name: Build application Docker image
          command: |
            docker build -t << parameters.registry >>/<< parameters.image >>:$(echo $CIRCLE_SHA1 | cut -c1-7) .
      - run:
          name: Save application Docker image
          command: |
            docker save -o << parameters.image >>-image.tar << parameters.registry >>/<< parameters.image >>:$(echo $CIRCLE_SHA1 | cut -c1-7)
      - store_artifacts:
          path: ./<< parameters.image >>-image.tar
          destination: << parameters.image >>-image.tar

      - persist_to_workspace:
          root: .
          paths: .

  push_docker_image:
    description: Push Docker image to registry
    parameters:
      tag:
        type: string
        description: Docker tag
        default: latest
      image:
        description: Docker image name
        type: string
      registry:
        description: Docker registry name
        type: string

    steps:
      - setup_remote_docker
      - attach_workspace:
          at: .

      - run:
          name: Load application Docker image
          command: |
            docker load --input << parameters.image >>-image.tar
      - run:
          name: Tag docker image
          command: |
            docker tag << parameters.registry >>/<< parameters.image >>:$(echo $CIRCLE_SHA1 | cut -c1-7) << parameters.registry >>/<< parameters.image >>:<< parameters.tag >>
            docker tag << parameters.registry >>/<< parameters.image >>:$(echo $CIRCLE_SHA1 | cut -c1-7) << parameters.registry >>/<< parameters.image >>:<< parameters.tag >>-$(echo $CIRCLE_SHA1 | cut -c1-7)
      - run:
          name: Push application Docker image
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker push << parameters.registry >>/<< parameters.image >>:<< parameters.tag >>-$(echo $CIRCLE_SHA1 | cut -c1-7)
            docker push << parameters.registry >>/<< parameters.image >>:<< parameters.tag >>

  alert_on_failure:
    description: Notifies channel on failure
    parameters:
      channel:
        description: Slack channel to send slack notification
        type: string
        default: $SLACK_DEFAULT_CHANNEL
    steps:
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1

jobs:
  dependencies:
    executor: node-executor
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "yarn.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            make install
      - save_cache:
          paths:
            - .venv
          key: v1-dependencies-{{ checksum "yarn.lock" }}

      - persist_to_workspace:
          root: .
          paths: .

      - alert_on_failure

  lint:
    executor: node-executor
    steps:
      - attach_workspace:
          at:
            .

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "yarn.lock" }}
            - v1-dependencies-

      - run:
          name: Install Hadolint
          command: make setup-hadolint

      - run:
          name: Lint Dockerfile
          command: make lint-docker

      - run:
          name: Lint Application
          command: make lint

      - alert_on_failure

  test:
    executor: node-executor
    steps:
      - attach_workspace:
          at:
            .

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "yarn.lock" }}
            - v1-dependencies-

      - run:
          name: Run Unit tests
          command: make test

      - alert_on_failure

  build_docker_image:
    executor: docker-executor
    steps:
      - build_docker_image:
          image: minesweeper
          registry: $DOCKER_REGISTRY

      - alert_on_failure

  push_latest:
    executor: docker-executor
    steps:
      - push_docker_image:
          tag: latest
          image: minesweeper
          registry: $DOCKER_REGISTRY

      - alert_on_failure

  publish_release:
    executor: node-executor
    steps:
      - attach_workspace:
          at: .

      - run:
          name: Publish release
          command: npx semantic-release

      - alert_on_failure

workflows:
  version: 2
  test_build_push_tag:
    jobs:
      - dependencies

      - lint:
          requires:
            - dependencies
      
      - test:
          requires:
            - lint

      - build_docker_image:
          filters:
            branches:
              only:
                - develop
                - main
          requires:
            - lint

      - push_latest:
          context: thelusina-context
          filters:
            branches:
              only:
                - develop
                - main
          requires:
            - build_docker_image

      - publish_release:
          context: thelusina-context
          filters:
            branches:
              only:
                - main
          requires:
            - push_latest